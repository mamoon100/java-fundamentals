/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;

public class Library {

    public static void main(String[] args) {
        System.out.println("Calling the roll method with 5 trails " + Arrays.toString(roll(5)));
        System.out.println("Does the [1, 2, 3, 4, 5, 5, 7, 8] contain duplicate item: " + containsDuplicates(new Integer[]{1, 2, 3, 4, 5, 5, 7, 8}));
        System.out.println("Does the [1, 2, 3, 4, 5, 6, 7, 8] contain duplicate item: " + containsDuplicates(new Integer[]{1, 2, 3, 4, 5, 6, 7, 8}));
        System.out.println("What is the Average of this array [1, 3, 7, 6, 8, 1, 5, 0, 15, 22, 35, 78, 99, 105, 258]: " + calculatingAverages(new int[]{1, 3, 7, 6, 8, 1, 5, 0, 15, 22, 35, 78, 99, 105, 258}));
        System.out.println("We have this two dimensional Array \n[[66, 64, 58, 65, 71, 57, 60],\n" + "[57, 65, 65, 70, 72, 65, 51],\n" + "[55, 54, 60, 53, 59, 57, 61],\n" + "[65, 56, 55, 52, 55, 62, 57]] \nand the array that contains the lowest average among them is:" + Arrays.toString(arraysOfArraysAverages(new int[][]{
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        })) + "\nand it's average: " + calculatingAverages(arraysOfArraysAverages(new int[][]{
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        })));

    }

    public static int[] roll(int trails) {
        int[] diceRoll = new int[trails];
        for (int i = 0; i < trails; i++) {
            diceRoll[i] = (int) (Math.random() * 6 + 1);
        }
        return diceRoll;
    }

    public static boolean containsDuplicates(Integer[] arr) {
        Integer[] temp = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if (Arrays.asList(temp).contains(arr[i])) {
                return true;
            }
            temp[i] = arr[i];

        }
        return false;
    }

    public static float calculatingAverages(int[] arr) {
        float sum = 0;
        for (float num : arr) {
            sum += num;
        }
        return Math.round((sum / arr.length) * 100.0) / 100.0F; // round to the second decimal
    }

    public static int[] arraysOfArraysAverages(int[][] arr) {
        double min = Double.POSITIVE_INFINITY;
        int[] minArray = new int[arr[0].length];
        for (int[] ints : arr) {
            double avg = calculatingAverages(ints);
            if (avg < min) {
                min = avg;
                minArray = ints;
            }
        }
        return minArray;
    }

}
