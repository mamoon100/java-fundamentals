/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.Test;

import static org.junit.Assert.*;

public class LibraryTest {
    // creating restaurant.
    Restaurant testRes = new Restaurant("Macdonalds", 5, "$");
    // creating review not include to specific restaurant so it will not affect unless we sit it up to certain res.
    Review noRestaurantReview = new Review("Good", "Mamoun", 4);
    // creating review to a restaurant
    Review restaurantReview = new Review(testRes, "Nice", "Batool", 3); // this review will be directly attach to testRes so the star will be 5+3=8 => 8/2=4
    // create user then append the user to review
    User user = new User("Hanaa");
    Review userReview = new Review(testRes, "not good", user, 1);
    //again this will affect the rating due this attaches directly to the restaurant so the rating will be 5+3+1=9 => 9/3 = 3


    @Test
    public void restaurantTest() {
        // test for creating res with the initial value of rating of 5

        assertEquals("The Stars are not the same", (int) this.testRes.getStars(), 3); // the 4 and not 5 because of the Batool review
        assertEquals("The price does not equal", this.testRes.getPrice(), "$");
        assertEquals("The name does not equal each other", this.testRes.getName(), "Macdonalds");


    }


    @Test
    public void reviewTest() {
        // check for updating star method
        userReview.updateStars(4);
        // 5+3+4 =12 => 12/3=> 4
        assertEquals("The star should be equal to 4", (int) this.testRes.getStars(), 4);

        // creating another review for the same user will not affect the rating
        Review sameUserReview = new Review(testRes, "eww", user, 0);
        //as we say this will not affect so the star should maintain 4
        assertEquals("The star should be equal to 4", (int) this.testRes.getStars(), 4);
    }
}
